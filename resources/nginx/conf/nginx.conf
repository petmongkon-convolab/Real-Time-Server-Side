
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}

http {

    #lua_package_path "/Users/a13139/work/nginx_install/lib/?.lua;;";

    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    upstream backends {
        consistent_hash $args;
        server 127.0.0.1:3001;
        server 127.0.0.1:3002;
    }

    lua_shared_dict hosts 1m;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            proxy_pass http://backends;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # Lua sample code
        #
        #location /lua {
        #    content_by_lua_block {
        #        local args = ngx.req.get_uri_args();
        #        for key, val in pairs(args) do
        #            if type(val) == "table" then
        #                ngx.say(key, ": ", table.concat(val, ", "))
        #            else
        #                ngx.say(key, ": ", val % 3 + 1)
        #            end
        #        end
        #    }
        #}

        # chash sample code
        #
        #location /add_host {
        #    content_by_lua_block {
        #        local chash = require "lua-consistent-hash/chash"
        #        local args = ngx.req.get_uri_args();
        #        for key, val in pairs(args) do
        #            if key == "host" then
        #                chash.add_upstream(val)
        #                ngx.say('Add OK');
        #            else
        #                ngx.say('Add Fail');
        #            end
        #        end
        #    }
        #}

        # chash sample code
        #
        #location /get_host {
        #    content_by_lua_block {
        #        local chash = require "lua-consistent-hash/chash"
        #        local args = ngx.req.get_uri_args();
        #        for key, val in pairs(args) do
        #            if key == "roomId" then
        #                ngx.say(chash.get_upstream(key));
        #            else
        #                ngx.say('Get Fail');
        #            end
        #        end
        #    }
        #}
    }

}
